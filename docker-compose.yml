version: "3"

networks:
    frontend:
        driver: ${NETWORKS_DRIVER}
    backend:
        driver: ${NETWORKS_DRIVER}

volumes:
    mysql:
        driver: ${VOLUMES_DRIVER}
    memcached:
        driver: ${VOLUMES_DRIVER}
    redis:
        driver: ${VOLUMES_DRIVER}
    mongo:
        driver: ${VOLUMES_DRIVER}
    phpmyadmin:
        driver: ${VOLUMES_DRIVER}
    elasticsearch:
        driver: ${VOLUMES_DRIVER}
    adminer:
        driver: ${VOLUMES_DRIVER}

services:
    ### Docker-in-Docker ################################################
    docker-in-docker:
        image: docker:dind
        privileged: true
        volumes:
            - ${APP_CODE_LOCAL_PATH}:${APP_CODE_CONTAINER_PATH}
        expose:
            - 2375
        networks:
            - backend

    ### Workspace Utilities Container ###########################
    workspace:
        build:
            context: ./workspace
            args:
                - PHP_VERSION=${PHP_VERSION}
                - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
                - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
                - INSTALL_SOAP=${WORKSPACE_INSTALL_SOAP}
                - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
                - INSTALL_MONGO=${WORKSPACE_INSTALL_MONGO}
                - INSTALL_SWOOLE=${WORKSPACE_INSTALL_SWOOLE}
                - INSTALL_DEPLOYER=${WORKSPACE_INSTALL_DEPLOYER}
                - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
                - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
                - PUID=${WORKSPACE_PUID}
                - PGID=${WORKSPACE_PGID}
                - NODE_VERSION=${WORKSPACE_NODE_VERSION}
                - YARN_VERSION=${WORKSPACE_YARN_VERSION}
                - TZ=${WORKSPACE_TIMEZONE}
        links:
            - docker-in-docker
        volumes:
            - ${APP_CODE_LOCAL_PATH}:${APP_CODE_CONTAINER_PATH}${APP_CODE_CONTAINER_FLAG}
        extra_hosts:
            - "dockerhost:${DOCKER_HOST_IP}"
        tty: true
        environment:
            - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
            - DOCKER_HOST=tcp://docker-in-docker:2375
        networks:
            - frontend
            - backend

    ### PHP-FPM Container #######################################
    php-fpm:
        build:
            context: ./php-fpm
            args:
                - PHP_VERSION=${PHP_VERSION}
                - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
                - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
                - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
                - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
                - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
                - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
                - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
        volumes:
            - ./php-fpm/php.ini:/usr/local/etc/php/php.ini
            - ./php-fpm/xdebug.ini:/etc/php/7.1/cli/conf.d/xdebug.ini
            - ./php-fpm/site.ini:/usr/local/etc/php/conf.d/site.ini
            - ./php-fpm/site.pool.ini:/usr/local/etc/php-fpm.d/site.pool.ini
            - ${APP_CODE_LOCAL_PATH}:${APP_CODE_CONTAINER_PATH}${APP_CODE_CONTAINER_FLAG}
        expose:
            - "9000"
        extra_hosts:
            - "dockerhost:${DOCKER_HOST_IP}"
        environment:
            - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
            - DOCKER_HOST=tcp://docker-in-docker:2375
        depends_on:
            - workspace
        networks:
            - backend
        links:
            - docker-in-docker

    ### PHP Worker Container #####################################
    php-worker:
        build:
            context: ./php-worker
            args:
                - PHP_VERSION=${PHP_VERSION}
                - INSTALL_SOAP=${PHP_WORKER_INSTALL_SOAP}
                - INSTALL_ZIP_ARCHIVE=${PHP_WORKER_INSTALL_ZIP_ARCHIVE}
                - PUID=${PHP_WORKER_PUID}
                - PGID=${PHP_WORKER_PGID}
        links:
            - docker-in-docker
        volumes:
            - ${APP_CODE_LOCAL_PATH}:${APP_CODE_CONTAINER_PATH}${APP_CODE_CONTAINER_FLAG}
            - ./php-worker/supervisord.d:/etc/supervisord.d
        depends_on:
            - workspace
        extra_hosts:
            - "dockerhost:${DOCKER_HOST_IP}"

    ### Laravel Echo Server #######################################
    laravel-echo-server:
        build:
            context: ./laravel-echo-server
        volumes:
            - ./laravel-echo-server/laravel-echo-server.json:/app/laravel-echo-server.json:ro
        ports:
            - "${LARAVEL_ECHO_SERVER_PORT}:6001"
        links:
            - redis
        networks:
            - frontend
            - backend

    ### Nginx Server Container ##################################
    nginx:
        build:
            context: ./nginx
            args:
                - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
                - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
                - CHANGE_SOURCE=${CHANGE_SOURCE}
        volumes:
            - ${APP_CODE_LOCAL_PATH}:${APP_CODE_CONTAINER_PATH}${APP_CODE_CONTAINER_FLAG}
            - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
            - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
            - ${NGINX_CONF}:/etc/nginx/nginx.conf
            - ${NGINX_SSL_PATH}:/etc/nginx/ssl
        ports:
            - "${NGINX_HOST_HTTP_PORT}:80"
            - "${NGINX_HOST_HTTPS_PORT}:443"
        depends_on:
            - php-fpm
        links:
            - docker-in-docker
        networks:
            - frontend
            - backend

    ### MySQL Container #########################################
    mysql:
        build:
            context: ./mysql
            args:
                - MYSQL_VERSION=${MYSQL_VERSION}
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        volumes:
            - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
            - ${MYSQL_CONF}:/etc/mysql/conf.d/my.cnf
        ports:
            - "${MYSQL_PORT}:3306"
        networks:
            - backend

    ### Redis Container #########################################
    redis:
        build: ./redis
        volumes:
            - ${DATA_PATH_HOST}/redis:/data
        ports:
            - "${REDIS_PORT}:6379"
        networks:
            - backend

    ### Memcached Container #####################################
    memcached:
        build: ./memcached
        volumes:
            - ${DATA_PATH_HOST}/memcached:/var/lib/memcached
        ports:
            - "${MEMCACHED_HOST_PORT}:11211"
        depends_on:
            - php-fpm
        networks:
            - backend

    ### Elasticsearch Container #######################################
    elasticsearch:
        build: ./elasticsearch
        volumes:
            - elasticsearch:/usr/share/elasticsearch/data
        environment:
            - cluster.name=devdock-cluster
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        ports:
            - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
            - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
        depends_on:
            - php-fpm
        networks:
            - frontend
            - backend

    ### MongoDB Container #######################################
    mongo:
        build: ./mongo
        ports:
            - "${MONGODB_PORT}:27017"
        volumes:
            - ${DATA_PATH_HOST}/mongo:/data/db

    ### Certbot #########################################
    certbot:
        build:
            context: ./certbot
        volumes:
            - ./data/certbot/certs/:/var/certs
            - ./certbot/letsencrypt/:/var/www/letsencrypt
        environment:
            - CN="fake.domain.com"
            - EMAIL="fake.email@gmail.com"
        networks:
            - frontend

    ### Adminer ###########################################
    adminer:
        build:
            context: ./adminer
            args:
                - INSTALL_MSSQL=${ADM_INSTALL_MSSQL}
        ports:
            - "${ADM_PORT}:8080"
        depends_on:
            - php-fpm
        networks:
            - frontend
            - backend
